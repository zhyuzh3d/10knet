{"time":"2017-01-04T10:49:03.850Z","type":"INF","data":"_zprms:.zprms & .zpromise method has added to Function."}
{"time":"2017-01-04T10:49:04.003Z","type":"INF","data":"_qn:Server is listening on 19110."}
{"time":"2017-01-04T10:49:04.032Z","type":"LOG","data":"_zprms:samples run:/**\n * 扩展函数的Promise方法，务必注意异常捕获，这里不包含reject处理，参见底部samples\n * 为所有函数增加.zprms和.zpromise方法，fn(arg,...,callBackFn(err,res))格式的函数可用；\n * 为所有函数增加.zprms2和.zpromise2方法，fn(callBackFn(err,res)，arg,...)格式的函数可用；\n * .zprms2可用做sleep功能,await setTimeout.zprms2(5000);\n */\n'use strict';\n\nconst _zprms = {\n    info: _zloger.info('_zprms:.zprms & .zpromise method has added to Function.'),\n};\n\n(function () {\n    Function.prototype.zprms = Function.prototype.zpromise = zprms;\n    Function.prototype.zprms2 = Function.prototype.zpromise2 = zprms2;\n})();\n\nmodule.exports = _zprms;\n\n//-----------------------functions------------------------\n\n/**\n * 匹配参数格式fn(arg,...,callBackFn(err,res))的函数\n * @returns {promise} promise\n */\nfunction zprms() {\n    var orgArgs = arguments;\n    var fn = this;\n    var prms = genPromise(fn, orgArgs, true);\n    return prms;\n};\n\n/**\n * 匹配参数格式fn(callBackFn(err,res),arg,...)的函数\n * @returns {promise} promise\n */\nfunction zprms2() {\n    var orgArgs = arguments;\n    var fn = this;\n    var prms = genPromise(fn, orgArgs, false);\n    return prms;\n};\n\n/**\n * 将callback转换为promise的关键函数\n * @param   {function} fn   需要转换的函数\n * @param   {object} args   原始函数的参数，即arguments对象\n * @param   {boolean} cbAtEnd  callback函数是否最后一个参数，默认为true\n * @returns {promise} promise\n */\n\nfunction genPromise(fn, args, cbAtEnd = true) {\n    return new Promise((resolve, reject) => {\n        function callbackFn(err, res) {\n            if (!err) {\n                resolve(res);\n            } else if (err && err.constructor != Error) {\n                //回调参数只有一个数据，没有err的情况，直接输出第一个参数\n                resolve(err);\n            } else {\n                reject(err, res);\n            };\n        };\n\n        var argsArr = [];\n        for (var key in args) {\n            argsArr.push(args[key]);\n        };\n\n        if (cbAtEnd) {\n            argsArr.push(callbackFn);\n        } else {\n            argsArr.unshift(callbackFn);\n        };\n\n        fn.apply(fn, argsArr);\n    });\n};\n\n\n//------------------------samples--------------------------\n(async function () {\n    try {\n        //read a file, then print the buffer.\n        var res = await $fs.readFile.zprms('./base_modules/_zprms.js');\n\n        //wait 3 sec then print undefined.\n        //var res = await setTimeout.zprms2(5000);\n\n        _zloger.log(`_zprms:samples run:${res}`);\n    } catch (err) {\n        _zloger.log(`_zprms:samples err':${err},${res}`);\n    };\n})();\n"}
{"time":"2017-01-04T10:59:08.156Z","type":"INF","data":"_zprms:.zprms & .zpromise method has added to Function."}
{"time":"2017-01-04T10:59:08.173Z","type":"INF","data":"_qn:Server is listening on 19110."}
{"time":"2017-01-04T10:59:27.703Z","type":"INF","data":"_zprms:.zprms & .zpromise method has added to Function."}
{"time":"2017-01-04T10:59:27.719Z","type":"INF","data":"_qn:Server is listening on 19110."}
{"time":"2017-01-04T10:59:27.736Z","type":"LOG","data":"_zprms:samples run:/**\n * 扩展函数的Promise方法，务必注意异常捕获，这里不包含reject处理，参见底部samples\n * 为所有函数增加.zprms和.zpromise方法，fn(arg,...,callBackFn(err,res))格式的函数可用；\n * 为所有函数增加.zprms2和.zpromise2方法，fn(callBackFn(err,res)，arg,...)格式的函数可用；\n * .zprms2可用做sleep功能,await setTimeout.zprms2(5000);\n */\n'use strict';\n\nconst _zprms = {\n    info: _zloger.info('_zprms:.zprms & .zpromise method has added to Function.'),\n};\n\n(function () {\n    Function.prototype.zprms = Function.prototype.zpromise = zprms;\n    Function.prototype.zprms2 = Function.prototype.zpromise2 = zprms2;\n})();\n\nmodule.exports = _zprms;\n\n//-----------------------functions------------------------\n\n/**\n * 匹配参数格式fn(arg,...,callBackFn(err,res))的函数\n * @returns {promise} promise\n */\nfunction zprms() {\n    var orgArgs = arguments;\n    var fn = this;\n    var prms = genPromise(fn, orgArgs, true);\n    return prms;\n};\n\n/**\n * 匹配参数格式fn(callBackFn(err,res),arg,...)的函数\n * @returns {promise} promise\n */\nfunction zprms2() {\n    var orgArgs = arguments;\n    var fn = this;\n    var prms = genPromise(fn, orgArgs, false);\n    return prms;\n};\n\n/**\n * 将callback转换为promise的关键函数\n * @param   {function} fn   需要转换的函数\n * @param   {object} args   原始函数的参数，即arguments对象\n * @param   {boolean} cbAtEnd  callback函数是否最后一个参数，默认为true\n * @returns {promise} promise\n */\n\nfunction genPromise(fn, args, cbAtEnd = true) {\n    return new Promise((resolve, reject) => {\n        function callbackFn(err, res) {\n            var cbArgs = arguments;\n\n            var datas = [];\n            for (var i = 0; i < cbArgs.length; i++) {\n                var arg = cbArgs[i];\n                if (arg) {\n                    if (arg.cosntructor == Error) {\n                        //参数里如果有一个Error就reject抛出这个错误\n                        reject(arg);\n                    } else {\n                        datas.push(arg);\n                    };\n                };\n            };\n\n            if (datas.length < 1) {\n                datas = undefined;\n            } else if (datas.length = 1) {\n                datas = datas[0];\n            };\n\n            resolve(datas);\n        };\n\n        var argsArr = [];\n        for (var key in args) {\n            argsArr.push(args[key]);\n        };\n\n        if (cbAtEnd) {\n            argsArr.push(callbackFn);\n        } else {\n            argsArr.unshift(callbackFn);\n        };\n\n        fn.apply(fn, argsArr);\n    });\n};\n\n\n//------------------------samples--------------------------\n(async function () {\n    try {\n        //read a file, then print the buffer.\n        var res = await $fs.readFile.zprms('./base_modules/_zprms.js');\n\n        //wait 3 sec then print undefined.\n        //var res = await setTimeout.zprms2(5000);\n\n        _zloger.log(`_zprms:samples run:${res}`);\n    } catch (err) {\n        _zloger.log(`_zprms:samples err':${err},${res}`);\n    };\n})();\n"}
{"time":"2017-01-04T10:59:44.378Z","type":"INF","data":"_zprms:.zprms & .zpromise method has added to Function."}
{"time":"2017-01-04T10:59:44.398Z","type":"INF","data":"_qn:Server is listening on 19110."}
{"time":"2017-01-04T10:59:44.414Z","type":"LOG","data":"_zprms:samples run:Error: ENOENT: no such file or directory, open './base_modules/_zprms2.js'"}
